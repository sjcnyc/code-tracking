<# 
    .NOTES 
    -------------------------------------------------------------------------------- 
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2015 v4.2.98 
     Generated on:       1/7/2016 9:47 AM 
     Generated by:         
     Organization:         
    -------------------------------------------------------------------------------- 
    .DESCRIPTION 
        GUI script generated by PowerShell Studio 2015 
#> 
#---------------------------------------------- 
#region Application Functions 
#---------------------------------------------- 
 
function OnApplicationLoad { 
    #Note: This function is not called in Projects 
    #Note: This function runs before the form is created 
    #Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path 
    #Note: To get the console output in the Packager (Windows Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList) 
    #Important: Form controls cannot be accessed in this function 
    #TODO: Add modules and custom code to validate the application load 
     
    return $true #return true for success or false for failure 
} 
 
function OnApplicationExit { 
    #Note: This function is not called in Projects 
    #Note: This function runs after the form is closed 
    #TODO: Add custom code to clean up and unload modules when the application exits 
     
    $script:ExitCode = 0 #Set the exit code for the Packager 
} 
 
#endregion Application Functions 
 
#---------------------------------------------- 
# Generated Form Function 
#---------------------------------------------- 
function Call-rdpforinternet_psf { 
 
    #---------------------------------------------- 
    #region Import the Assemblies 
    #---------------------------------------------- 
    [void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 
    [void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 
    [void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 
    [void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 
    [void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a') 
    [void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 
    [void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a') 
    [void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 
    [void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a') 
    #endregion Import Assemblies 
 
    #---------------------------------------------- 
    #region Generated Form Objects 
    #---------------------------------------------- 
    [System.Windows.Forms.Application]::EnableVisualStyles() 
    $formRDP = New-Object 'System.Windows.Forms.Form' 
    $splitcontainer1 = New-Object 'System.Windows.Forms.SplitContainer' 
    $buttonEnter = New-Object 'System.Windows.Forms.Button' 
    $tabcontrol1 = New-Object 'System.Windows.Forms.TabControl' 
    $tab = New-Object 'System.Windows.Forms.TabPage' 
    $treeview1 = New-Object 'System.Windows.Forms.TreeView' 
    $imagelist1 = New-Object 'System.Windows.Forms.ImageList' 
    $contextmenustrip1 = New-Object 'System.Windows.Forms.ContextMenuStrip' 
    $toolstripmenuitem1 = New-Object 'System.Windows.Forms.ToolStripMenuItem' 
    $InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState' 
    #endregion Generated Form Objects 
 
    #---------------------------------------------- 
    # User Generated Script 
    #---------------------------------------------- 
     
    function OnApplicationLoad { 
        #Note: This function is not called in Projects 
        #Note: This function runs before the form is created 
        #Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path 
        #Note: To get the console output in the Packager (Windows Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList) 
        #Important: Form controls cannot be accessed in this function 
        #TODO: Add modules and custom code to validate the application load 
         
        return $true #return true for success or false for failure 
    } 
     
    function OnApplicationExit { 
        #Note: This function is not called in Projects 
        #Note: This function runs after the form is closed 
        #TODO: Add custom code to clean up and unload modules when the application exits 
         
        $script:ExitCode = 0 #Set the exit code for the Packager 
    } 
     
    #region Control Helper Functions 
    function Get-CheckedNodes { 
    <# 
        .SYNOPSIS 
            This function collects a list of checked nodes in a TreeView 
     
        .DESCRIPTION 
            This function collects a list of checked nodes in a TreeView 
     
        .PARAMETER  $NodeCollection 
            The collection of nodes to search 
     
        .PARAMETER  $CheckedNodes 
            The ArrayList that will contain the all the checked items 
         
        .EXAMPLE 
            $CheckedNodes = New-Object System.Collections.ArrayList 
            Get-CheckedNodes $treeview1.Nodes $CheckedNodes 
            foreach($node in $CheckedNodes) 
            {     
                Write-Host $node.Text 
            } 
    #> 
        param ( 
            [ValidateNotNull()] 
            [System.Windows.Forms.TreeNodeCollection]$NodeCollection, 
            [ValidateNotNull()] 
            [System.Collections.ArrayList]$CheckedNodes) 
         
        foreach ($Node in $NodeCollection) { 
            if ($Node.Checked) { 
                [void]$CheckedNodes.Add($Node) 
            } 
            Get-CheckedNodes $Node.Nodes $CheckedNodes 
        } 
    } 
     
    #endregion 
     
    function Add-Node { 
         
        param ( 
            $selectedNode, 
            $dname, 
            $name, 
            $ou 
        ) 
         
        $newNode = new-object System.Windows.Forms.TreeNode 
        $newNode.Name = $dname 
        $newNode.Text = $name 
         
        IF ($ou -eq $true) { 
             
            $newnode.ImageIndex = 0 
            $newNode.SelectedImageIndex = 0 
             
        } else { 
             
            $newnode.ImageIndex = 4 
            $newNode.SelectedImageIndex = 4 
             
            } 
         
        $selectedNode.Nodes.Add($newNode) | Out-Null 
        If ($dname -eq $serverou) { 
            $newNode.ImageIndex = 2 
            $newNode.SelectedImageIndex = 3 
        } 
        return $newNode 
    } 
     
    function Get-NextLevel { 
         
        param ( 
            $selectedNode, 
            $dn, 
            $name, 
            $OU 
        ) 
         
        $Ous = Get-ADObject -Filter 'ObjectClass -eq "organizationalUnit" -or ObjectClass -eq "container" -or ObjectClass -eq "computer"' -SearchScope OneLevel -SearchBase $dn  
         
        If ($OUs -eq $null) { 
            $node = Add-Node $selectedNode $dn $name $OU 
        } Else { 
            $node = Add-Node $selectedNode $dn $name $OU 
             
            $OUs | % { 
                If ($_.ObjectClass -eq 'organizationalUnit') { 
                    $OU = $true 
                } else { 
                    $OU = $false 
                } 
                 
                Get-NextLevel $node $_.distinguishedName $_.name $OU 
            } 
             
             
        } 
    } 
     
    function Build-TreeView { 
         
        if ($treeNodes) { 
            $treeview1.Nodes.remove($treeNodes) 
             
        } 
         
        $treeNodes = $treeview1.Nodes[0] 
         
        #Generate Module nodes 
        Get-NextLevel $treeNodes $serverou $DNSDomain 
         
        $treeNodes.Expand() 
        $treeNodes.FirstNode.Expand() 
         
    } 
     
    function New-RDPsession { 
         
        param ($computer) 
         
        $rdp = New-Object AxMSTSCLib.AxMsRdpClient4NotSafeForScripting 
        $rdp.Dock = 'Fill' 
         
        if ($tabcontrol1.SelectedTab.Controls.Count -eq 1) { 
             
            foreach ($control in $tabcontrol1.SelectedTab.Controls) { 
                $tabcontrol1.SelectedTab.Controls.Remove($control) 
                 
            } 
        } 
         
        $tabcontrol1.SelectedTab.Controls.Add($rdp) 
         
        $rdp.Name = 'PowerShell-RDP' 
        $rdp.Enabled = 'true' 
        $rdp.AdvancedSettings2.DisplayConnectionBar = 'true' 
        $rdp.AdvancedSettings2.EnableCredSspSupport = 'true' 
        $rdp.ConnectingText = 'Connecting...' 
        $rdp.DisconnectedText = 'Disconnected' 
        $rdp.Server = $computer 
        $rdp.AdvancedSettings2.RDPPort = 3389 
        $rdp.UserName = $credential.username 
        $rdp.AdvancedSettings2.ClearTextPassword = $credential.GetNetworkCredential().Password 
        $rdp.Connect() 
         
    } 
     
    $formRDP_Load = { 
         
        Import-Module ActiveDirectory 
         
        [void][system.reflection.Assembly]::LoadFrom(' C:\Users\sconnea\Dropbox\Development\POWERSHELL\!Temp\AxInterop.MSTSCLib.dll')
        [void][system.reflection.Assembly]::LoadFrom("$pwd\Interop.MSTSCLib.dll") 
         
        $script:DNSDomain = $env:userdnsdomain 
        $script:serverou = 'OU=SRV,OU=GBL,OU=USA,DC=bmg,DC=bagint,DC=com' 
         
        Build-TreeView 
         
         
    } 
     
    $treeview1_DoubleClick = { 
         
        if (!($credential)) { $script:credential = Get-Credential}else{ 
         
        if ($tab = $tabcontrol1.TabPages | ? { $_.Text -eq $treeview1.SelectedNode.Text }) { 
             
            $tabcontrol1.SelectTab($tab) 
            New-RDPsession $treeview1.SelectedNode.Text 
             
        } else { 
                 
                if (($treeview1.SelectedNode.SelectedImageIndex -eq 4) -and ($treeview1.SelectedNode.index -ne 0)) { 
                     
                    if ($tabcontrol1.TabPages[0].Text -eq 'Server') { 
                         
                        $tabcontrol1.TabPages[0].Text = $treeview1.SelectedNode.Text 
                         
                        New-RDPsession $treeview1.SelectedNode.Text 
                         
                    } else { 
                         
                        $tabcontrol1.TabPages.Add($treeview1.SelectedNode.Text) 
                        $tabcontrol1.SelectTab($tabcontrol1.SelectedIndex + 1) 
                         
                        New-RDPsession $treeview1.SelectedNode.Text 
                         
                    } 
                } 
            } 
             
        } 
    } 
     
    $treeview1_KeyDown = [System.Windows.Forms.KeyEventHandler]{ 
         
        if ($_.Alt -and $_.KeyCode -eq 'C') { 
             
            $script:credential = Get-Credential 
             
        } 
    } 
     
    $contextmenustrip1_ItemClicked = [System.Windows.Forms.ToolStripItemClickedEventHandler]{ 
         
            $tabcontrol1.TabPages.Remove($tabcontrol1.SelectedTab) 
    } 
     
    $tabcontrol1_MouseDown=[System.Windows.Forms.MouseEventHandler]{ 
     
         
        if ($_.Button -eq 'Right') { 
             
            for ($i = 0; $i -lt $tabControl1.TabCount; $i++) { 
                 
                $tabs = $tabcontrol1.GetTabRect($i) 
                 
                if ($tabs.Contains($_.Location)) { 
                     
                    $tabcontrol1.SelectTab($i) 
                 
                } 
                 
            } 
             
             
        } 
         
    } 
     
    # --End User Generated Script-- 
    #---------------------------------------------- 
    #region Generated Events 
    #---------------------------------------------- 
     
    $Form_StateCorrection_Load= 
    { 
        #Correct the initial state of the form to prevent the .Net maximized form issue 
        $formRDP.WindowState = $InitialFormWindowState 
    } 
     
    $Form_Cleanup_FormClosed= 
    { 
        #Remove all event handlers from the controls 
        try 
        { 
            $formRDP.remove_Load($formRDP_Load) 
            $tabcontrol1.remove_MouseDown($tabcontrol1_MouseDown) 
            $treeview1.remove_DoubleClick($treeview1_DoubleClick) 
            $treeview1.remove_KeyDown($treeview1_KeyDown) 
            $contextmenustrip1.remove_ItemClicked($contextmenustrip1_ItemClicked) 
            $formRDP.remove_Load($Form_StateCorrection_Load) 
            $formRDP.remove_FormClosed($Form_Cleanup_FormClosed) 
        } 
        catch [Exception] 
        { } 
    } 
    #endregion Generated Events 
 
    #---------------------------------------------- 
    #region Generated Form Code 
    #---------------------------------------------- 
    $formRDP.SuspendLayout() 
    $splitcontainer1.SuspendLayout() 
    $tabcontrol1.SuspendLayout() 
    $contextmenustrip1.SuspendLayout() 
    # 
    # formRDP 
    # 
    $formRDP.Controls.Add($splitcontainer1) 
    $formRDP.Controls.Add($buttonEnter) 
    $formRDP.AutoSizeMode = 'GrowAndShrink' 
    $formRDP.ClientSize = '1288, 739' 
    $formRDP.Name = 'formRDP' 
    $formRDP.ShowIcon = $False 
    $formRDP.Text = 'RDP' 
    $formRDP.WindowState = 'Maximized' 
    $formRDP.add_Load($formRDP_Load) 
    # 
    # splitcontainer1 
    # 
    $splitcontainer1.BorderStyle = 'Fixed3D' 
    $splitcontainer1.Dock = 'Fill' 
    $splitcontainer1.Location = '0, 0' 
    $splitcontainer1.Name = 'splitcontainer1' 
    [void]$splitcontainer1.Panel1.Controls.Add($treeview1) 
    [void]$splitcontainer1.Panel2.Controls.Add($tabcontrol1) 
    $splitcontainer1.Size = '1288, 739' 
    $splitcontainer1.SplitterDistance = 211 
    $splitcontainer1.TabIndex = 5 
    # 
    # buttonEnter 
    # 
    $buttonEnter.Anchor = 'Bottom, Right' 
    $buttonEnter.Location = '640, 711' 
    $buttonEnter.Name = 'buttonEnter' 
    $buttonEnter.Size = '96, 23' 
    $buttonEnter.TabIndex = 3 
    $buttonEnter.TabStop = $False 
    $buttonEnter.Text = 'Enter' 
    $buttonEnter.UseVisualStyleBackColor = $True 
    $buttonEnter.Visible = $False 
    # 
    # tabcontrol1 
    # 
    $tabcontrol1.Controls.Add($tab) 
    $tabcontrol1.AllowDrop = $True 
    $tabcontrol1.Appearance = 'FlatButtons' 
    $tabcontrol1.ContextMenuStrip = $contextmenustrip1 
    $tabcontrol1.Dock = 'Fill' 
    $tabcontrol1.Location = '0, 0' 
    $tabcontrol1.Name = 'tabcontrol1' 
    $tabcontrol1.SelectedIndex = 0 
    $tabcontrol1.Size = '1069, 735' 
    $tabcontrol1.TabIndex = 0 
    $tabcontrol1.add_MouseDown($tabcontrol1_MouseDown) 
    # 
    # tab 
    # 
    $tab.AllowDrop = $True 
    $tab.Location = '4, 25' 
    $tab.Name = 'tab' 
    $tab.Padding = '3, 3, 3, 3' 
    $tab.Size = '1061, 706' 
    $tab.TabIndex = 1 
    $tab.Text = 'Server' 
    $tab.UseVisualStyleBackColor = $True 
    # 
    # treeview1 
    # 
    $treeview1.Dock = 'Fill' 
    $treeview1.ImageIndex = 0 
    $treeview1.ImageList = $imagelist1 
    $treeview1.Location = '0, 0' 
    $treeview1.Name = 'treeview1' 
    $System_Windows_Forms_TreeNode_1 = New-Object 'System.Windows.Forms.TreeNode' ('Remote Desktops', 4, 4) 
    $System_Windows_Forms_TreeNode_1.ImageIndex = 4 
    $System_Windows_Forms_TreeNode_1.Name = 'Active Directory Hierarchy' 
    $System_Windows_Forms_TreeNode_1.SelectedImageIndex = 4 
    $System_Windows_Forms_TreeNode_1.Tag = 'root' 
    $System_Windows_Forms_TreeNode_1.Text = 'Remote Desktops' 
    [void]$treeview1.Nodes.Add($System_Windows_Forms_TreeNode_1) 
    $treeview1.SelectedImageIndex = 0 
    $treeview1.Size = '207, 735' 
    $treeview1.TabIndex = 2 
    $treeview1.add_DoubleClick($treeview1_DoubleClick) 
    $treeview1.add_KeyDown($treeview1_KeyDown) 
    # 
    # imagelist1 
    # 
    $Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter 
    #region Binary Data 
    $System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String(' 
AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu 
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA 
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD 
AAAADwMAAACmCwAAAk1TRnQBSQFMAgEBBQEAARgBAAEYAQABEAEAARABAAT/AQkBAAj/AUIBTQE2 
AQQGAAE2AQQCAAEoAwABQAMAASADAAEBAQABCAYAAQgYAAGAAgABgAMAAoABAAGAAwABgAEAAYAB 
AAKAAgADwAEAAcAB3AHAAQAB8AHKAaYBAAEzBQABMwEAATMBAAEzAQACMwIAAxYBAAMcAQADIgEA 
AykBAANVAQADTQEAA0IBAAM5AQABgAF8Af8BAAJQAf8BAAGTAQAB1gEAAf8B7AHMAQABxgHWAe8B 
AAHWAucBAAGQAakBrQIAAf8BMwMAAWYDAAGZAwABzAIAATMDAAIzAgABMwFmAgABMwGZAgABMwHM 
AgABMwH/AgABZgMAAWYBMwIAAmYCAAFmAZkCAAFmAcwCAAFmAf8CAAGZAwABmQEzAgABmQFmAgAC 
mQIAAZkBzAIAAZkB/wIAAcwDAAHMATMCAAHMAWYCAAHMAZkCAALMAgABzAH/AgAB/wFmAgAB/wGZ 
AgAB/wHMAQABMwH/AgAB/wEAATMBAAEzAQABZgEAATMBAAGZAQABMwEAAcwBAAEzAQAB/wEAAf8B 
MwIAAzMBAAIzAWYBAAIzAZkBAAIzAcwBAAIzAf8BAAEzAWYCAAEzAWYBMwEAATMCZgEAATMBZgGZ 
AQABMwFmAcwBAAEzAWYB/wEAATMBmQIAATMBmQEzAQABMwGZAWYBAAEzApkBAAEzAZkBzAEAATMB 
mQH/AQABMwHMAgABMwHMATMBAAEzAcwBZgEAATMBzAGZAQABMwLMAQABMwHMAf8BAAEzAf8BMwEA 
ATMB/wFmAQABMwH/AZkBAAEzAf8BzAEAATMC/wEAAWYDAAFmAQABMwEAAWYBAAFmAQABZgEAAZkB 
AAFmAQABzAEAAWYBAAH/AQABZgEzAgABZgIzAQABZgEzAWYBAAFmATMBmQEAAWYBMwHMAQABZgEz 
Af8BAAJmAgACZgEzAQADZgEAAmYBmQEAAmYBzAEAAWYBmQIAAWYBmQEzAQABZgGZAWYBAAFmApkB 
AAFmAZkBzAEAAWYBmQH/AQABZgHMAgABZgHMATMBAAFmAcwBmQEAAWYCzAEAAWYBzAH/AQABZgH/ 
AgABZgH/ATMBAAFmAf8BmQEAAWYB/wHMAQABzAEAAf8BAAH/AQABzAEAApkCAAGZATMBmQEAAZkB 
AAGZAQABmQEAAcwBAAGZAwABmQIzAQABmQEAAWYBAAGZATMBzAEAAZkBAAH/AQABmQFmAgABmQFm 
ATMBAAGZATMBZgEAAZkBZgGZAQABmQFmAcwBAAGZATMB/wEAApkBMwEAApkBZgEAA5kBAAKZAcwB 
AAKZAf8BAAGZAcwCAAGZAcwBMwEAAWYBzAFmAQABmQHMAZkBAAGZAswBAAGZAcwB/wEAAZkB/wIA 
AZkB/wEzAQABmQHMAWYBAAGZAf8BmQEAAZkB/wHMAQABmQL/AQABzAMAAZkBAAEzAQABzAEAAWYB 
AAHMAQABmQEAAcwBAAHMAQABmQEzAgABzAIzAQABzAEzAWYBAAHMATMBmQEAAcwBMwHMAQABzAEz 
Af8BAAHMAWYCAAHMAWYBMwEAAZkCZgEAAcwBZgGZAQABzAFmAcwBAAGZAWYB/wEAAcwBmQIAAcwB 
mQEzAQABzAGZAWYBAAHMApkBAAHMAZkBzAEAAcwBmQH/AQACzAIAAswBMwEAAswBZgEAAswBmQEA 
A8wBAALMAf8BAAHMAf8CAAHMAf8BMwEAAZkB/wFmAQABzAH/AZkBAAHMAf8BzAEAAcwC/wEAAcwB 
AAEzAQAB/wEAAWYBAAH/AQABmQEAAcwBMwIAAf8CMwEAAf8BMwFmAQAB/wEzAZkBAAH/ATMBzAEA 
Af8BMwH/AQAB/wFmAgAB/wFmATMBAAHMAmYBAAH/AWYBmQEAAf8BZgHMAQABzAFmAf8BAAH/AZkC 
AAH/AZkBMwEAAf8BmQFmAQAB/wKZAQAB/wGZAcwBAAH/AZkB/wEAAf8BzAIAAf8BzAEzAQAB/wHM 
AWYBAAH/AcwBmQEAAf8CzAEAAf8BzAH/AQAC/wEzAQABzAH/AWYBAAL/AZkBAAL/AcwBAAJmAf8B 
AAFmAf8BZgEAAWYC/wEAAf8CZgEAAf8BZgH/AQAC/wFmAQABIQEAAaUBAANfAQADdwEAA4YBAAOW 
AQADywEAA7IBAAPXAQAD3QEAA+MBAAPqAQAD8QEAA/gBAAHwAfsB/wEAAaQCoAEAA4ADAAH/AgAB 
/wMAAv8BAAH/AwAB/wEAAf8BAAL/AgAD/0MAAf8DAAL/AfQB8wH0Av8zAAH/Ae8B7AHvAv8BBwG8 
A/EBvAEHAf8yAAGSA7wBkgH/AbwB8QHwAbwB8AHxAbwB9DIAAfcB8AIHAe0BAAH/AfQBBwLvAfQB 
/zMAAfcB8gEHAe8BbQPsAesBbQHrBOwBBzAAAe8B8gEHAewBiwKtB7MBiwFtMAAB7wHxAQcB7AGL 
AdUI1AGzAW0wAAEHAfIBBwHtAa4D1QXUAdUBswHrMAABBwHyAQcB7QG0BNsF1QGzAeswAAG8AfMB 
vAGSAbQD3AbbAbQB7DAAAfAB8wHwAfcBtAbcA9sBtAHsMAABvAHzAfAB9wG0CNwB2wG0AewwAAL/ 
AQABvAG0CdwBugHsMwAB8gPtBZID7QEHcAAk/wL0Bv8D9AP/DPQD/wp0BHMC/wp0BHMC/wPsAesB 
bQH3Av8BBwLsAesBcgFtAfQC/wwqA/8BdAGaA3kBegd5AXMC/wF0AZoDeQF6B3kBcwL/AfcBBwGY 
ATQBVgH3Av8BvAHvAQcBVgE5AXIB9AL/AVEBHAF0A3MFUQEqA/8BeQKaBUsFmgF0Av8BeQyaAXQC 
/wHvAQcB7wJ4AZIC8QMHAXgBWAHrAfQC/wF0ApkCeQN0A1IBKgP/AXkCmgFLA1EBKgWaAXQC/wF5 
DJoBdAL/Ae8CBwHvAZIC7AFyAe0CBwLvAewB9AL/AZkCGgGgBJoCegF5AVID/wF5AaABmgF5AZkC 
eQFRBZoBdAL/AXkBoAuaAXQC/wEHAe8B9wGSAu0BeAE1AXgB7wP3AewD/wGZAhoBoASaAnoBeQFS 
A/8BeQGgAZoCmQGgAXkBUgWaAXQC/wF5AaALmgF0Av8BBwPvAfcBkgGYAXgBmQEHA+8B7AP/AZkC 
GgGgBJoCegF5AVID/wGZAaABmgGZAXkBmgF5AVIFmgF0Av8BmQGgC5oBdAL/AbwD8wG8AZIBBwHv 
AQcB8QLzAfIB7QP/AZkCGgGgBJoCegF5AVID/wGZAaABmgJ5AXQCUgWaAXQC/wGZAaALmgF0Av8B 
vAEHAu8B9wPtAe8BBwPvAe0D/wGZARoBmgKZBnkBUgP/AZkBwwGaBHQBeQGgBJoBdAL/AZkBwwaa 
AaAEmgF0Av8CvAIHAvcCBwO8AgcBkgP/AZkBGgGZAxoDmgFSAXkBUgP/AZkBwwOaAqABmQWaAXQC 
/wGZAcMDmgKgAZkFmgF0Av8CvAHrAewCBwLzAfABvAHtAW0BBwH3A/8BmQEaAZkC9gTDAVIBeQFS 
A/8BmQWgAZoCdAV5Av8BmQWgAZoCdAV5Av8BvAEHApIB7wH3ApIB7wG8Ae8B7QHvAfcD/wGZAhoC 
9gTDAVgBeQFSA/8BmQGaBBoBdAOaApkBmgF5Av8BeQGaBBoBdAOaApkBmgF5Av8D9AHzAbwB8QK8 
Ae8B8AT0A/8BmQMaApkDeQFYAXkBUgP/ARsGeQGaAvYB1gG0AZoBmQL/AZkGeQGaAvYB1gG0AZoB 
eQX/AfQBvAH3ARIB7AHvAfAH/wFRARwBeQN0AVIEUQEqCf8BwwZ5AcMI/wGaBnkBmgX/AfQBvAEH 
Au8B9wHxB/8MUUL/AUIBTQE+BwABPgMAASgDAAFAAwABIAMAAQEBAAEBBgABARYAA/8BAAL/BgAB 
3AEHBwABAwcAAQMGAAEEAQdGAAEgBwAB4AcAAv+GAAs=')) 
    #endregion 
    $imagelist1.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream) 
    $Formatter_binaryFomatter = $null 
    $System_IO_MemoryStream = $null 
    $imagelist1.TransparentColor = 'Transparent' 
    # 
    # contextmenustrip1 
    # 
    [void]$contextmenustrip1.Items.Add($toolstripmenuitem1) 
    $contextmenustrip1.Name = 'contextmenustrip1' 
    $contextmenustrip1.Size = '61, 4' 
    $contextmenustrip1.add_ItemClicked($contextmenustrip1_ItemClicked) 
    # 
    # toolstripmenuitem1 
    # 
    $toolstripmenuitem1.Name = 'toolstripmenuitem1' 
    $toolstripmenuitem1.Size = '152, 22' 
    $toolstripmenuitem1.Text = 'Close Tab' 
    $contextmenustrip1.ResumeLayout() 
    $tabcontrol1.ResumeLayout() 
    $splitcontainer1.ResumeLayout() 
    $formRDP.ResumeLayout() 
    #endregion Generated Form Code 
 
    #---------------------------------------------- 
 
    #Save the initial state of the form 
    $InitialFormWindowState = $formRDP.WindowState 
    #Init the OnLoad event to correct the initial state of the form 
    $formRDP.add_Load($Form_StateCorrection_Load) 
    #Clean up the control events 
    $formRDP.add_FormClosed($Form_Cleanup_FormClosed) 
    #Show the Form 
    return $formRDP.ShowDialog() 
 
} #End Function 
 
#Call OnApplicationLoad to initialize 
if((OnApplicationLoad) -eq $true) 
{ 
    #Call the form 
    Call-rdpforinternet_psf | Out-Null 
    #Perform cleanup 
    OnApplicationExit 
} 